---
title: "Analysis.Ciona_TMTproC_normalization"
author: "Andrea Mariossi"
date: '`r Sys.Date()`'
format: 
  html:
    toc: true
    toc-depth: 6
    toc-location: left
    fig-width: 12
    fig-height: 8
    fig-align: center
    number-sections: true
    smooth-scroll: true
    code-overflow: wrap
    highlight-style: github
    theme: Lux
    max-width: 1800px
    page-layout: full
    fig-format: png
    # fig-format: pdf
# knitr:
  # opts_chunk:
    # dev: cairo_pdf
execute:
  echo: false
  warning: false
  output: true
output:
 html_document:
 md_document:
editor: visual
editor_options: 
  chunk_output_type: inline
---

# TMTproC *Ciona*

We conducted a quantitative complement tandem mass tag (TMTpro) mass spectrometry (MS) analysis
(Johnson et al., 2021) of the proteome of *Ciona* embryos across eight developmental stages,
spanning unfertilized eggs, MZT, neurulation, tail elongation, and larval stage. Notably, the use of
a multiplexed proteomics method allows for straightforward interpretation of low signal as low
protein abundance, presenting a significant advantage over label-free measurements, where the
absence of signal may be due to either low abundance or the mass spectrometer's failure to detect
the protein of interest (Pappireddi et al., 2019).

#### Loading libraries

```{r setup, include=FALSE}

#### Global chunk options ------------------------------
knitr::opts_chunk$set(
  eval       = TRUE,  # whether to run code in code chunk
  include    = TRUE,  # whether to include the chunk output
  echo       = TRUE,  # Whether to show code chunk in final output
  error      = TRUE,  # whether to display error messages
  message    = FALSE,  # whether to preserve messages
  warning    = FALSE,  # whether to preserve warnings
  fig.align  = "center",  # give plot room to breathe
  fig.width= 12, 
  fig.height= 8,
  fig.path = '/Users/mariossi/Library/CloudStorage/Dropbox-Princeton/Papers/Proteomics_ciona/c.figures_analysis/00.Ciona_prot_normalization/'  # file path to store plots
)
####  --------------------------------------------------
  # out.width  = "100%",  # controls the output size

## Width for code chunks ---------------- 
options(width = 1000)
save_plots <- TRUE
write_files <- TRUE

#### Packages --------------------------------------
# Load the packages to be used.
library(tidyverse)
library(tidymodels)
library(patchwork)
library(readxl)
library(readr)
library(matrixStats)
library(ggplot2)
library(ggcorrplot)
library(GGally) # parallel plot
library(hrbrthemes) # theme_pubr (Avenir Narrow) 
library(biomaRt) # annotation
library(naniar) # na and missing point 
library(visdat)
library(ggrepel) # text annotation
library(paletteer) #colours check
library(styler)
library(ggpubr)
####  --------------------------------------------------

```

#### Functions and misc

```{r Functions and misc, paged.print=TRUE}

rm(list=ls(all=TRUE))

###############################
#### Directories
###############################

directory <-  c("/Users/mariossi/Library/CloudStorage/Dropbox-Princeton/Papers/Proteomics_ciona/")

directory_save  <-  c("/Users/mariossi/Library/CloudStorage/Dropbox-Princeton/Papers/Proteomics_ciona/c.figures_analysis/")

# directory <- file.choose(). # pick directory where the file is downloaded
raw_dir_proteome="b.raw_data/proteome/" 
ciona_stages <- c("unfE","fertE","cell16","iniG","latN","midTII","latTII","larva")
ciona_stages_beautify <- c("unfertilised","1-cell","16-cell","110-cell","late neurula","mid tailbud","late tailbud","larva")

###############################
#### Themes and colors
###############################

ciona_stages_palette <- c("#009392FF", "#39B185FF", "#9CCB86FF", "#E9E29CFF", "#EEB479FF", "#E88471FF", "#CF597EFF", "#A22E3B")

ciona_cluster_palette <- c("#88A0DCFF", "#381A61FF", "#7C4B73FF", "#ED968CFF", "#AB3329FF", "#E78429FF", "#F9D14AFF", "#7FA074FF") # > paletteer::paletteer_d("MetBrewer::Archambault") + MetBrewer::Cassatt2" - Colorblind-Friendly

###############################
#### Functions
###############################

# Parallelel plot
function_ggparallel <- function(data, col_names, group_col, plot_title, alpha_lines = 1, show_points = TRUE, plot_scale = "globalminmax", ...) {
  # Plot data
  plot <- ggparcoord(data = data,
                     columns = col_names,
                     groupColumn = group_col,
                     title = plot_title,
                     alphaLines = alpha_lines,
                     showPoints = show_points,
                     scale = plot_scale,
                     ...)
  plot <- plot + 
    theme_pubr(base_family = "Avenir") +
    labs(x="") +
    theme(legend.position = "bottom",
          legend.text = element_text(size=15)) # Remove legend
  return(plot)
}

function_plotGuides = guides(
  color = "none", 
  size = guide_legend(title="Proteins number",
                      title.theme = element_text(size = 15,face = "bold"),
  direction = "horizontal",
  title.position = "top",
  nrow=1)) 

# function for cluster plots
plot_cluster_norm <- function(df, title) {
  df %>%  
    pivot_longer(cols = c(1:8), names_to = "stage", values_to = "expression") %>%
    mutate(stage = str_remove(stage, "_byRowCol")) %>% 
    mutate(stage = fct_relevel(stage, ciona_stages), cluster = factor(cluster)) %>% 
    ggplot(aes(stage, expression, color = cluster)) +
    geom_point() +
    geom_line(aes(group = interaction(cluster, size), size = as.factor(size))) +
    scale_color_manual(values = ciona_cluster_palette) +
    theme_pubr(base_family = "Avenir") +
    theme(legend.position = "bottom", plot.title = element_text(size = 10)) +
    labs(title = title, x = "Developmental stages", y="Relative expression") +
    scale_size_discrete(name = "Cluster size") # rename the size legend
}

# function for cluster pivot
cluster_pivot_data <- function(data, cluster, cols) {
  data %>%
    filter(.cluster == cluster) %>%
    dplyr::select(all_of(cols)) %>%
    pivot_longer(-1) %>% 
    mutate(name = case_when(name == "unfE_byRowCol" ~ 1, name == "fertE_byRowCol" ~ 2, name == "cell16_byRowCol" ~ 3, name == "iniG_byRowCol" ~ 4, name == "latN_byRowCol" ~ 5, name == "midTII_byRowCol" ~ 6, name == "latTII_byRowCol" ~ 7, name == "larva_byRowCol" ~ 8))
}

# function to linear regression
plot_cluster_lr <- function(data, title, norm, tag) {
  ggplot(data, aes(x = name, y = value)) +
    geom_point() +
    ylim(0, 8) +
    theme_pubr(base_family = "Avenir") +
    geom_smooth(method = "lm", se = FALSE) +
    labs(title = title,
         subtitle = paste(
           "Adj R^2 = ", signif(summary(lm(value ~ name, data = data))$adj.r.squared, 5), 
           "Intercept = ", signif(coef(lm(value ~ name, data = data))[1], 5),
           "Slope = ", signif(coef(lm(value ~ name, data = data))[2], 5), size = 5),
         tag= tag,
         y="Relative expression",
         x="Stage") +
    if(norm) { scale_y_continuous(labels = function(x) format(x, scientific = FALSE, big.mark = ","))}
}

# check HGNCmitocarta results with plot: individual proteins
plot_HGNCmitocarta_dynamics <- function(from, to) {
  ciona_rowMean_mitocartaHGNC_flatDynamics.df %>%
    rename_with(.fn = ~str_replace(., "_by_rowMean$", ""), .cols = ends_with("_by_rowMean")) %>%
    ungroup() %>%
    slice(from:to) %>%
    pivot_longer(cols = c(4:11),
                 names_to = "stage", 
                 values_to = "expression") %>%
    mutate(stage = fct_relevel(stage, ciona_stages)) %>%
    ggplot(aes(stage, expression, color = Protein_Id_transcript)) +
    geom_point(aes(group = Protein_Id_transcript)) +
    geom_line(aes(group = Protein_Id_transcript)) +
    facet_wrap(~Protein_Id_transcript) +
    theme_pubr(legend = "none",base_family = "Avenir") +
    ylim(0,6)  
}

```

#### Loading data

```{r Loading data, paged.print=TRUE}

###############################
#### Loading the data
###############################

ciona_TMTproC_prenormal.df <- 
  as_tibble(
  read_tsv(file = paste0(directory, raw_dir_proteome, "ky21_w_oxmet_protein_quant_pre.normalisation.tsv"), col_names = T))

# cleaning up the names
lookup <- c("unfE" = "TMTPro126", "fertE" = "TMTPro128C", "cell16" = "TMTPro129N", "iniG" = "TMTPro130C", "latN" = "TMTPro131N", "midTII" = "TMTPro131C", "latTII" = "TMTPro133C", "larva" = "TMTPro134N")

ciona_TMTproC_prenormal.df <-
  ciona_TMTproC_prenormal.df %>%
  rename(all_of(lookup)) %>% # Rename the column
  filter(!grepl("_contaminant", Protein_Id, ignore.case = TRUE)) %>% # exclude human/pig/TEV contaminant, 42 entries
  filter(!grepl("##", Protein_Id, ignore.case = TRUE)) %>% # exclude scramble input for FDR correction
  dplyr::select(-c("Gene_Symbol", "Description", "Group_ID", "Collapsed", "Parsimony", "default~ratios0 sum", "default~ratios9 sum")) %>%
  mutate(Protein_Id_Gene = gsub(pattern = "\\.v\\S*\\..*", replacement = "", Protein_Id)) %>% # transcript to gene ID
  rename(Protein_Id_transcript = Protein_Id) %>%
  arrange(Protein_Id_transcript) %>%
  relocate(Protein_Id_transcript, Protein_Id_Gene, everything())

glimpse(ciona_TMTproC_prenormal.df)
# ciona_Number_of_peptides.df <- ciona_TMTproC_prenormal.df[,1:3]

vis_dat(ciona_TMTproC_prenormal.df)
vis_miss(ciona_TMTproC_prenormal.df)
miss_case_summary(ciona_TMTproC_prenormal.df)
# 7095 protein entries

```

### Standard Normalisation

##### Normalisation step using rowMean 1st follow by columnMedian

```{r Normalisation step using rowMean 1st follow by columnMedian, paged.print=TRUE}

###############################
#### Normalise each row by its average and then by the median columns
###############################
ciona_TMTproC_rowMean.df <-
  ciona_TMTproC_prenormal.df %>%
  rowwise() %>% # row-wise operations
  mutate(row_mean = rowMeans(pick(c(4:11)))) %>% # calculate mean by row
  mutate(across(c(4:11), ~ . / row_mean)) %>% # normalise by dividing each row by its mean
  dplyr::select(-row_mean) %>% # remove the row_mean column
  rename_at(c(4:11), ~ paste0(., "_by_rowMean")) # rename columns with _by_rowMean suffix

ciona_TMTproC_colMedian_normVector <-
  ciona_TMTproC_rowMean.df %>%
  ungroup() %>%
  summarize(across(.cols = 4:11, .fns = median)) # summarize columns median

# # Double checking results
# col_medians <- apply(ciona_TMTproC_rowMean.df[,-c(1:3)], 2, median)
# col_medians_tbl <- as_tibble(t(col_medians))

# normalised by column median and cleaning up the names
ciona_TMTproC_rowMean_colMedian.df <-
  ciona_TMTproC_rowMean.df %>%
  dplyr::select(c(4:11)) %>%
  map2_dfc(ciona_TMTproC_colMedian_normVector, `/`) %>% # Divide each column of the selected df by the corresponding value in the colMedian_norm_.vector_flat vector
  rename_with(
    .fn = ~ str_replace(., "_by_rowMean$", "_byRowCol"),
    .cols = ends_with("_by_rowMean")
  ) %>%
  bind_cols(ciona_TMTproC_rowMean.df[, 1:3], ., .name_repair = "minimal")

# write.table(ciona_TMTproC_rowMean_colMedian.df, "normalized_counts_notGood_TMTproC_ciona.txt", quote=F, col.names=T, row.names=F, sep="\t")

# Plotting raw data
plot_original_ciona <-
  ciona_TMTproC_prenormal.df %>%
  pivot_longer(cols = -c(1:3), names_to = "stage", names_transform = as.factor) %>%
  ggplot(aes(y = factor(stage, levels = rev(ciona_stages)), x = value, fill = stage)) +
  geom_boxplot() +
  scale_color_manual(values = setNames(ciona_stages_palette, ciona_stages), guide = "none") +
  scale_fill_manual(values = setNames(ciona_stages_palette, ciona_stages), guide = "none") +
  labs(title = "Raw data", y = "Developmental stages", x = " Relative abundance") +
  theme_pubr(base_family = "Avenir") +
  theme(legend.position = "none")

# Plotting normalised data
plot_normRowCol_ciona <-
  ciona_TMTproC_rowMean_colMedian.df %>%
  pivot_longer(-c(1:3), names_to = "stage", names_transform = as.factor) %>%
  filter(str_detect(stage, "_byRowCol")) %>%
  mutate(stage = str_remove(stage, "_byRowCol")) %>%
  ggplot(aes(y = factor(stage, levels = rev(ciona_stages)), x = value, fill = stage)) +
  geom_boxplot() +
  scale_color_manual(values = setNames(ciona_stages_palette, ciona_stages), guide = "none") +
  scale_fill_manual(values = setNames(ciona_stages_palette, ciona_stages), guide = "none") +
  labs(title = "Normalised not good", y = "Developmental stages", x = " Relative abundance") +
  theme_pubr(base_family = "Avenir") +
  theme(legend.position = "none")

plot_original_ciona + plot_normRowCol_ciona

```

##### Assessing the normalisation step

CLuster 6 contains protein related to ribosomes, mitochondria, and housekeeping genes. This
cluster's expression decreases over time. Try a different normalization method to emove this
technical variation and enhance the biological signals.

```{r Assessing_the_normalisation_step, paged.print=TRUE}

###############################
#### Evaluating the normalization process through k-means clustering.
###############################

set.seed(777) # reproduce the clusters

# Fit and predict clusters with k = 8
ciona_kmeans <- kmeans(ciona_TMTproC_rowMean_colMedian.df[, 4:11], centers = 8, nstart = 100, iter.max = 1000)

glance(ciona_kmeans) # extracts a single-row summary: totss, tot.withinss of clustering

# clean up the clustering and add cluster prediction to the original data set
ciona_results <- augment(ciona_kmeans, ciona_TMTproC_rowMean_colMedian.df)
ciona_results %>% slice_head(n = 5)

# summarizes  per-cluster level info eg how many point each cluster and within cluster sum of squares
ciona_cluster_avgSummary <- tidy(ciona_kmeans)
ciona_cluster_avgSummary

# Visualise dynamics x cluster. Eg cluster 1 should be flatter
function_ggparallel(
  data = ciona_cluster_avgSummary %>% rename_with(~ str_remove(., "_byRowCol")),
  col_names = 1:8,
  group_col = "cluster",
  plot_title = "Ciona: cluster center dynamcis"
) +
  geom_line(aes(color = cluster, size = as.factor(size))) +
  scale_color_manual(values = ciona_cluster_palette) +
  theme_pubr(base_family = "Avenir") +
  facet_grid(~cluster) +
  # Visualise each protein behavior x cluster
  function_ggparallel(
    data = ciona_results %>% rename_with(~ str_remove(., "_byRowCol")),
    col_names = 4:11,
    group_col = ".cluster",
    plot_title = "Ciona: proteins dynamics x cluster"
  ) +
  # geom_line(aes(color=cluster, size=as.factor(size))) +
  scale_color_manual(values = ciona_cluster_palette) +
  theme_pubr(base_family = "Avenir") +
  facet_grid(~.cluster) +
  theme(legend.position = "none") +
  plot_layout(ncol = 1) & theme(plot.margin = unit(c(0.5, 0.5, 0, 0.5), "lines"), axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1)) & theme_pubr(base_family = "Avenir")

# ciona_results %>% rename_with(~ str_remove(., "_byRowCol")) %>%
#   pivot_longer(cols = c(4:11), names_to = "stage", values_to = "expression") %>%
#   mutate(stage = fct_relevel(stage, ciona_stages)) %>%
#   ggplot(aes(stage,expression, color = .cluster)) +
#   geom_point(aes(group = Protein_Id_transcript)) +
#   geom_line(aes(group = Protein_Id_transcript)) +
#   scale_color_manual(values = ciona_cluster_palette) +
#   facet_wrap(~.cluster) + theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1))
```

### Improving the normalization process

It seems that dividing the protein values by the median column values is not an effective method for
normalizing this data because the "flat" proteins are decreasing over time. As an alternative, we
try using ribosomal and/or mitochondrial proteins as internal standards to improve the normalization
process and better capture the stable proteins.

#### Mitocarta

The mitochondrial protein annotation provided by the Mitocarta database
(https://www.broadinstitute.org/mitocarta/mitocarta30-inventory-mammalian-mitochondrial-proteins-and-pathways)
includes only Entrez IDs. However, the Ciona gff3 annotation utilizes HGCN IDs. To map between these
two annotations, we first use biomart and then select only the mitochondrial proteins present in our
TMTcPro dataframe.

##### Genes and protein annotation

```{r Genes and protein annotation}

# Annotating by gff3
ciona_annotation_gff3 <- as_tibble(read.delim(file = paste0(directory, "a.reference_annotation/annotation_ciona.KY21ensembl.109.MT.tsv"), header = TRUE, sep = "\t", dec = ".", strip.white = T)) %>% dplyr::select(1, 2, 10, 11, 12)
glimpse(ciona_annotation_gff3)

# Annotating by HGNC
human_mitocarta <- read_excel(paste0(directory, "a.reference_annotation/Human.MitoCarta3.0.xls"), sheet = "A Human MitoCarta3.0", trim_ws = T, col_names = T) %>%
  dplyr::select(1, 3, 5) %>%
  mutate(human_mitocarta = "human_mitocarta")
# dplyr::select(1,3,5,15,16) $uniprot lenght and geneID
glimpse(human_mitocarta)

```

##### Mapping NCBI Entrez Gene ID of Mitocarta to HGNC symbols

```{r Mapping NCBI Entrez Gene ID of Mitocarta to HGNC symbols}

###############################
#### Convert the NCBI Entrez Gene IDs from Mitocarta to their corresponding HGNC symbols.
###############################

ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl") # use human genes dataset

# head(listAttributes(ensembl),20) # define the attributes to retrieve (HGNC symbol and Entrez Gene ID)

# split in two to handle the number of attributes
attributes <- c("entrezgene_id", "hgnc_symbol", "hgnc_id", "description")
attributes2 <- c("entrezgene_id", "entrezgene_accession") # "entrezgene_description"

# convert Entrez Gene ID of mitocarta to HGNC symbols
entrez_ids <- human_mitocarta$HumanGeneID # 1136

hgnc_symbols <- getBM(
  attributes = attributes,
  filters = "entrezgene_id",
  values = entrez_ids,
  mart = ensembl
)
hgnc_symbols2 <- getBM(
  attributes = attributes2,
  filters = "entrezgene_id",
  values = entrez_ids,
  mart = ensembl
)

hgnc_symbols <-
  hgnc_symbols %>%
  left_join(hgnc_symbols2, by = "entrezgene_id") %>% # Merge the two dfs
  relocate(hgnc_id, entrezgene_accession, hgnc_symbol, entrezgene_id, description)
glimpse(hgnc_symbols)

# ENSG00000230623 not in HGNC
# write.table(hgnc_symbols, "hgnc_symbols_to_match.txt", quote=F, col.names=T, row.names=F, sep="\t")

# human_match_table <- as_tibble(read.delim(file = paste0(directory,"a_reference_annotation/ciona_KY21/hgnc_symbols_to_match.txt"), header = TRUE, sep = "\t", dec = ".",strip.white = T))
# glimpse(human_match_table)

human_mitocarta_HGNC.df <-
  human_mitocarta %>%
  left_join(hgnc_symbols, multiple = "all", by = c("HumanGeneID" = "entrezgene_id")) %>%
  dplyr::select(5, 1, 2, 6, 7) %>%
  filter(!(hgnc_id == "HGNC:1995" & HumanGeneID == 1159)) %>%
  arrange(hgnc_id) %>%
  slice(-(1:3)) # 3 rows are empyty for hgnc_id and HumanGeneID

vis_dat(human_mitocarta_HGNC.df)
vis_miss(human_mitocarta_HGNC.df)
miss_case_summary(human_mitocarta_HGNC.df)

# human_mitocarta_HGNC <- human_mitocarta_HGNC[!apply(human_mitocarta_HGNC == " ", 1, all),]

# diff <- human_mitocarta_HGNC$Symbol == human_mitocarta_HGNC$hgnc_symbol
# diff2 <- human_mitocarta_HGNC$entrezgene_accession == human_mitocarta_HGNC$hgnc_symbol
# human_mitocarta_HGNC[!diff, "entrezgene_accession"] # CKMT1A and CKMT1B are duplicates
# it look good you can drop the common columns
# PRORP HGNC:19958
# protein only RNase P catalytic subunit [Source:HGNC Symbol;Acc:HGNC:19958]
# protein only RNase P catalytic subunit

```

##### Visualise mitocarta genes

```{r Visualise mitocarta genes}

###############################
#### Visualise and select stable mitochondria proteins
###############################

# Select the mitochondrial proteins present in TMTcPro with less than 2 fold change in relative abundance over the time course.
ciona_TMTproC_rowMean_mitocartaHGNC.df <-
  ciona_TMTproC_rowMean.df %>%
  left_join(ciona_annotation_gff3 %>% dplyr::select(2:4), by = c("Protein_Id_transcript" = "TranscriptID")) %>%
  right_join(human_mitocarta_HGNC.df %>% dplyr::select(1, 5), by = c("HGNC" = "hgnc_id")) %>%
  filter_at(vars(4:11), all_vars(. <= 2)) # fold change less than 2 over development

# 2nd filtering step
ciona_rowMean_mitocartaHGNC_flatDynamics.vector <-
  ciona_TMTproC_rowMean_mitocartaHGNC.df %>%
  rename_with(.fn = ~ str_replace(., "_by_rowMean$", ""), .cols = ends_with("_by_rowMean")) %>%
  rowwise() %>%
  transmute(
    Protein_Id_transcript = Protein_Id_transcript,
    diff_1cell_unfert = abs(`fertE` - unfE),
    diff_16cell_1cell = abs(`cell16` - `fertE`),
    diff_110cell_16cell = abs(`iniG` - `cell16`),
    diff_lateneurula_110cell = abs(`latN` - `iniG`),
    diff_midtailbud_lateneurula = abs(`midTII` - `latN`),
    diff_latetailbud_midtailbud = abs(`latTII` - `midTII`),
    diff_larva_latetailbud = abs(larva - `latTII`)
  ) %>%
  mutate(diff_sum = sum(c_across(starts_with("diff")))) %>% # calculate sum difference
  filter(diff_sum < 1) # keep only proteinz with sum less than 2 sum difference

# Filter step 1
toselect_flat <-
  ciona_rowMean_mitocartaHGNC_flatDynamics.vector$Protein_Id_transcript
# Filter step 2
ciona_rowMean_mitocartaHGNC_flatDynamics.df <- ciona_TMTproC_rowMean_mitocartaHGNC.df[ciona_TMTproC_rowMean_mitocartaHGNC.df$Protein_Id_transcript %in% toselect_flat, ]

# #  lag betwenn stages give the same resutls as above
# df %>%
#   rowwise() %>%
#   mutate(diff_all = sum(abs(diff(c_across(unfertilised:larva), lag = 1)))) %>%
#   filter(diff_all < 1)

HGNCmitocarta.dynamics.1 <- plot_HGNCmitocarta_dynamics(0, 140)
HGNCmitocarta.dynamics.2 <- plot_HGNCmitocarta_dynamics(141, 270)

HGNCmitocarta.dynamics.1 # they look good
HGNCmitocarta.dynamics.2 # they look good

# check result with plot: all proteins
ciona_TMTproC_rowMean_mitocartaHGNC.df %>%
  ungroup() %>%
  rename_with(.fn = ~ str_replace(., "_by_rowMean$", ""), .cols = ends_with("_by_rowMean")) %>%
  pivot_longer(cols = c(4:11), names_to = "stage", values_to = "expression") %>%
  mutate(stage = fct_relevel(stage, ciona_stages)) %>%
  ggplot(aes(stage, expression, color = Protein_Id_transcript)) +
  geom_point(aes(group = Protein_Id_transcript)) +
  labs(title = "Some are still too dynamics and need to be exclude for normalization") +
  geom_line(aes(group = Protein_Id_transcript)) +
  ylim(0, 2) +
  theme_pubr(base_family = "Avenir") +
  theme(legend.position = "none") +
  ciona_rowMean_mitocartaHGNC_flatDynamics.df %>%
  ungroup() %>%
  rename_with(.fn = ~ str_replace(., "_by_rowMean$", ""), .cols = ends_with("_by_rowMean")) %>%
  pivot_longer(cols = c(4:11), names_to = "stage", values_to = "expression") %>%
  mutate(stage = fct_relevel(stage, ciona_stages)) %>%
  ggplot(aes(stage, expression, color = Protein_Id_transcript)) +
  geom_point(aes(group = Protein_Id_transcript)) +
  labs(title = "Good for normalization") +
  geom_line(aes(group = Protein_Id_transcript)) +
  ylim(0, 2) & theme_pubr(base_family = "Avenir",legend = "none")


```

##### Normalisation step using rowMean follow by flat df columnMedian

```{r Normalisation step using rowMean follow by flat df columnMedian}

###############################
#### Normalising using the median column of stable mitochondria proteins
###############################

# Median by column of mito protein
ciona_colMedian_normVector_mitocartaHGNC <-
  ciona_rowMean_mitocartaHGNC_flatDynamics.df %>%
  dplyr::select(4:11) %>%
  ungroup() %>%
  summarize_all(median)

# Normalise by median column
ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df <-
  ciona_TMTproC_rowMean.df %>%
  dplyr::select(4:11) %>%
  map2_dfc(ciona_colMedian_normVector_mitocartaHGNC, `/`) %>% # Divide each column of the selected df by the corresponding value in the colMedian_norm_.vector_flat vector
  bind_cols(ciona_TMTproC_rowMean.df[, 1:3], ., .name_repair = "minimal")

ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df <-
  ciona_TMTproC_rowMean.df %>%
  dplyr::select(4:11) %>%
  map2_dfc(ciona_colMedian_normVector_mitocartaHGNC, `/`) %>% # Divide each column of the selected df by the corresponding value in the colMedian_norm_.vector_flat vector
  rename_with(
    .fn = ~ str_replace(., "_by_rowMean$", "_byRowCol"),
    .cols = ends_with("_by_rowMean")
  ) %>%
  bind_cols(ciona_TMTproC_rowMean.df[, 1:3], ., .name_repair = "minimal") %>%
  left_join(ciona_annotation_gff3 %>% dplyr::select(2:4), by = c("Protein_Id_transcript" = "TranscriptID")) %>%
  relocate(1, 2, 12, 13, 3, everything())

```

##### Assessing the mitocarta normalisation step

Normalization look good, with a cluster of protein ( ribosome and mitocondria) that are flat during
embryogeneis . eg housekeeping

```{r Assessing the mitocarta normalisation step}

###############################
#### Plot before after mitocarta only proteins dynamics 
###############################

# Before
ciona_avgNorm_std <-
  ciona_TMTproC_rowMean_colMedian.df %>%
  filter(Protein_Id_transcript %in% toselect_flat) %>%
  # ungroup() %>%
  summarize(across(c(4:11), median)) %>%
  pivot_longer(everything()) %>%
  mutate(
    name = str_remove(name, "_byRowCol"),
    name = case_when(
      name == "unfE" ~ 1,
      name == "fertE" ~ 2,
      name == "cell16" ~ 3,
      name == "iniG" ~ 4,
      name == "latN" ~ 5,
      name == "midTII" ~ 6,
      name == "latTII" ~ 7,
      name == "larva" ~ 8
    )
  )

# After
ciona_avgNorm_mitocarta <-
  ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df %>%
  filter(Protein_Id_transcript %in% toselect_flat) %>%
  summarize(across(c(6:13), median)) %>%
  pivot_longer(everything()) %>%
  mutate(
    name = str_remove(name, "_byRowCol"),
    name = case_when(
      name == "unfE" ~ 1,
      name == "fertE" ~ 2,
      name == "cell16" ~ 3,
      name == "iniG" ~ 4,
      name == "latN" ~ 5,
      name == "midTII" ~ 6,
      name == "latTII" ~ 7,
      name == "larva" ~ 8
    )
  )

function_ggparallel(
  data = ciona_TMTproC_rowMean_colMedian.df %>%
    filter(Protein_Id_transcript %in% toselect_flat) %>% rename_with(~ str_remove(., "_byRowCol")),
  col_names = 4:11,
  group_col = "Protein_Id_transcript",
  plot_title = "Ciona: std norm prot dynamcis"
) +
  theme(legend.position = "none") +
  ggplot(ciona_avgNorm_std, aes(x = name, y = value)) +
  geom_point() +
  theme_pubr(base_family = "Avenir") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  ggtitle("Linear Regression of Stage vs. Value") +
  xlab("Stage") +
  ylab("Value") +

  function_ggparallel(
    data = ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df %>%
      filter(Protein_Id_transcript %in% toselect_flat) %>% rename_with(~ str_remove(., "_byRowCol")),
    col_names = 6:13,
    group_col = "Protein_Id_transcript",
    plot_title = "Ciona: std mito prot dynamcis"
  ) +
  theme(legend.position = "none") +
  ggplot(ciona_avgNorm_mitocarta, aes(x = name, y = value)) +
  # ggplot(ciona_avgNorm_mitocarta, aes(x = as.numeric(sub("Stage ", "", name)), y = value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  ggtitle("Linear Regression of Stage vs. Value") +
  theme_pubr(base_family = "Avenir") +
  xlab("Stage") +
  ylab("Value") & theme_pubr(legend = "none",base_family = "Avenir")

# Save the normalised TMTproC data for Ciona
ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df %>%
  rename_with(~ str_remove(., "_byRowCol")) %>%
  rename("protein_id_transcript" = "Protein_Id_transcript", "protein_id_gene" = "Protein_Id_Gene", "human_id" = "HumanID", "hgnc" = "HGNC", "number_of_peptides" = "Number_of_peptides") %>%
  write.table(., paste0(directory_save, "/ciona_proteome_norm.tsv"), quote = F, col.names = T, row.names = F, sep = "\t")

```

##### Same results as above

```{r}
# # divide each column of df by the corresponding column of vector median 
# norm_ciona_mitocarta <- ciona_TMTproC_rowMean.df
# norm_ciona_mitocarta[, 4:11] <- mapply('/', norm_ciona_mitocarta[, 4:11], ciona_colMedian_normVector_mitocartaHGNC) 
# 
# norm_ciona_mitocarta
# ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df
```

##### Plotting mitocarta normalisation

```{r Plotting mitocarta normalisation}

###############################
#### Kmeans dynamics of Ciona protein dataset with mitocarta normalisation 
###############################

set.seed(777) # reproduce the clusters

# Fit and predict clusters with k = 8
ciona_kmeans_mito <- kmeans(ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df[,6:13], centers = 8, nstart = 100, iter.max = 1000)

# clean up the clustering and add cluster prediction to the original data set
ciona_results_mito <- augment(ciona_kmeans_mito, ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df)
ciona_results_mito %>% slice_head(n = 5)

# summarizes  per-cluster level info eg how many point each cluster and within cluster sum of squares
ciona_cluster_avg_summary_mito <- tidy(ciona_kmeans_mito)
ciona_cluster_avg_summary_mito

# Visualise dynamics x cluster
function_ggparallel(data = ciona_cluster_avg_summary_mito %>% rename_with(.fn = ~str_replace(., "_byRowCol$", ""),.cols = ends_with("_byRowCol")),
                    col_names = 1:8,
                    group_col = "cluster",
                    plot_title = "Ciona mito: cluster dynamcis") + 
  geom_line(aes(color=cluster, size=as.factor(size))) +
  scale_color_manual(values = ciona_cluster_palette) +
  theme_pubr(base_family = "Avenir") +
  facet_grid(~ cluster) +
  theme(legend.position = "bottom") +
# Visualise each protein behavior x cluster
function_ggparallel(data = ciona_results_mito %>% rename_with(.fn = ~str_replace(., "_byRowCol$", ""),.cols = ends_with("_byRowCol")),
                    col_names = 6:13,
                    group_col = ".cluster",
                    plot_title = "Ciona mito: proteins dynamics x cluster") + 
  geom_line(aes(color=.cluster)) +
  scale_color_manual(values = ciona_cluster_palette) +
  theme_pubr(base_family = "Avenir") +
  facet_grid(~ .cluster) +
  theme(legend.position = "none") &
plot_layout(ncol = 1) & theme(plot.margin = unit(c(0.5, 0.5, 0, 0.5), "lines"), axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 1)) & theme_pubr(legend = "none",base_family = "Avenir")

# results_mito %>%  pivot_longer(cols = c(6:13),
#                         names_to = "stage", 
#                         values_to = "expression") %>% 
#   mutate(stage = str_remove(stage, "_byRowCol"),
#          stage = fct_relevel(stage, ciona_stages)) %>% 
#   ggplot(aes(stage,expression, color = .cluster)) +
#   geom_point(aes(group = Protein_Id_transcript)) +
#   geom_line(aes(group = Protein_Id_transcript)) +
#   facet_wrap(~.cluster)

# Boxplot all entries
plot_normGood_ciona <-
  ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df %>% 
    pivot_longer(-c(1:5), names_to = "stage", names_transform = as.factor) %>%  
    filter(str_detect(stage, "_byRowCol")) %>% 
    mutate(stage = str_remove(stage, "_byRowCol")) %>% 
  ggplot(aes(y = factor(stage, levels = rev(ciona_stages)), x = value, fill = stage)) +    
  # geom_line(aes(group = Protein_Id_transcript)) +
  # geom_point(aes(color=stage)) +
  geom_boxplot() +
  scale_color_manual(values = setNames(ciona_stages_palette, ciona_stages), guide = "none") +
  scale_fill_manual(values = setNames(ciona_stages_palette, ciona_stages), guide = "none") +
  labs(title = "Normalised mitocarta good", y = "Developmental stages", x ="Relative abundance") +
  theme_pubr(base_family = "Avenir") + theme(legend.position = "none") + theme_pubr(legend = "none",base_family = "Avenir")
    
plot_original_ciona + plot_normRowCol_ciona + plot_normGood_ciona & theme_pubr(legend = "none",base_family = "Avenir")

```

#### Ribosomes

Normalising with ribosomes yield simialr results

```{r Ribosomes}

ciona_ribosome <-  as_tibble(read_excel(path = paste0(directory,"a.reference_annotation/Supp Table - KY21_info.xlsx"),col_names = T,trim_ws = T,sheet = "ribosome_prot"))
glimpse(ciona_ribosome)

# Annotated ribosomes
ciona_TMTproC_rowMean_ribosome.df <-
  ciona_TMTproC_rowMean.df %>%  
  dplyr::select(c(1,4:11)) %>% 
  right_join(ciona_ribosome, by = c("Protein_Id_transcript" = "TranscriptID")) %>% 
  dplyr::select(-GeneID) %>% 
  rename_with(
  .fn = ~str_replace(., "_by_rowMean$", ""),
  .cols = ends_with("_by_rowMean")) %>% 
   filter_at(vars(2:9), all_vars(. <= 2)) # fc less than 2

ciona_TMTproC_rowMean_ribosome.df %>% group_by(annotation) %>%  tally() # 314 ribosome associated proteins ==> 298 with cut off 

# write.table("HGNCmitocarta.dynamics.df.txt", quote=F, col.names=T, row.names=F, sep="\t")

###############################
#### Normalising using the median column of stable ribosomes proteins
###############################

#  Median by column
ciona_colMedian_normVector_Ribo <- 
  ciona_TMTproC_rowMean_ribosome.df %>% 
  dplyr::select(2:9) %>% 
  ungroup() %>%
  summarize_all(median)

# divide each column of df by the corresponding column of vector median 
ciona_normRibo <- ciona_TMTproC_rowMean.df #%>% drop_na()
ciona_normRibo[, 4:11] <- mapply('/', ciona_normRibo[, 4:11], ciona_colMedian_normVector_Ribo)
colnames(ciona_normRibo) <- c("Protein_Id_transcript", "Protein_Id_Gene", "Number_of_peptides", "unfE_byRowCol", "fertE_byRowCol", "cell16_byRowCol", "iniG_byRowCol", "latN_byRowCol", "midTII_byRowCol", "latTII_byRowCol", "larva_byRowCol")

###############################
#### Kmeans dynamics of Ciona protein dataset with ribosomes normalisation 
###############################

set.seed(777) # reproduce the clusters
# Fit and predict clusters with k = 8
ciona_kmeans_ribo <- kmeans(ciona_normRibo[,4:11], centers = 8, nstart = 100, iter.max = 1000)

# clean up the clustering and add cluster prediction to the original data set
ciona_results_ribo <- augment(ciona_kmeans_ribo, ciona_normRibo)

# summarizes  per-cluster level info 
ciona_cluster_avgSummary_ribo <- tidy(ciona_kmeans_ribo)
ciona_cluster_avgSummary_ribo

# ciona_cluster_avgSummary_ribo %>% filter(cluster == 5) 
ciona_cluster_avgSummary_ribo %>%  
  pivot_longer(cols = c(1:8), names_to = "stage", values_to = "expression") %>% 
  mutate(stage = str_remove(stage, "_byRowCol")) %>% 
  mutate(stage = fct_relevel(stage, ciona_stages), cluster = factor(cluster)) %>% 
  ggplot(aes(stage, expression, color = cluster)) +
  geom_point() +
  geom_line(aes(group = interaction(cluster, size), size = as.factor(size))) +
  scale_color_manual(values = ciona_cluster_palette) +
  theme(legend.position = "bottom", plot.title = element_text(size = 10)) +
  labs(title = "Ribosome normalization", x = "") & theme_pubr(legend = "bottom",base_family = "Avenir")
  # scale_size_discrete(name = "Cluster size") + # rename the size legend
  # guides(color = guide_none())

```

### Comparing normalization process

```{r Comparing normalization process, fig.height=20, fig.width=15}

###############################
#### cluster plots
###############################

plot_std_norm <- plot_cluster_norm(ciona_cluster_avgSummary, "Before good normalization") + scale_color_manual(values = c("1" = "#AB3329FF", "2" = "#88A0DCFF", "3" = "#ED968CFF","4" = "#381A61FF", "5" = "#E78429FF", "6" = "#7FA074FF","7" = "#7C4B73FF", "8" = "#F9D14AFF"))
plot_mito_norm <- plot_cluster_norm(ciona_cluster_avg_summary_mito, "Mitocarta normalization") 
plot_ribo_norm <- plot_cluster_norm(ciona_cluster_avgSummary_ribo, "Ribosome normalization") +
  scale_color_manual(values = c("1" = "#7FA074FF", "2" = "#7C4B73FF", "3" = "#88A0DCFF","4" = "#E78429FF", "5" = "#381A61FF", "6" = "#ED968CFF","7" = "#F9D14AFF", "8" = "#AB3329FF")) 

top <-  plot_std_norm + plot_mito_norm + plot_ribo_norm

###############################
#### data pivot and linear regression
###############################

# function for cluster plots
ciona_results_std_pivot <- cluster_pivot_data(ciona_results, 2, c(1,4:11))
ciona_results_mito_pivot <- cluster_pivot_data(ciona_results_mito, 1, c(1,6:13))
ciona_results_ribo_pivot <- cluster_pivot_data(ciona_results_ribo, 3, c(1,4:11))

# Plot linear regression for each normalization method
bottom <- 
  plot_cluster_lr(ciona_results_std_pivot, "Standard normalisaton", FALSE, "B1") + 
  plot_cluster_lr(ciona_results_mito_pivot, "Mitocarta normalisaton", FALSE,"B2") +
  plot_cluster_lr(ciona_results_ribo_pivot, "Ribosome normalisaton", FALSE, "B3") & theme_pubr(base_family = "Avenir")

top / bottom + plot_annotation(title = 'Normalization comparison') + plot_annotation(tag_levels = 'A') &
  theme(text = element_text('Avenir'), plot.title = element_text(size = 30), plot.tag = element_text(size = 15)) 

```

### Relative distribution

Counts per protein scaled to integrate to 1. This is useful, to compare the proteome between
species.

```{r scaleing 0-1}

###############################
#### reshaping the data to span 0-1 and/or to the number of multiplext TMT channels (8 for ciona; 10 in THao et al.;11 in Itallie et al.)
###############################

# Sum of channels/ stages is 8 (8 channels - 8 development stages)
ciona_proteome <- 
  ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df %>%
  rename_with(~ str_remove(., "_byRowCol")) %>%
  rename("protein_id_transcript" = "Protein_Id_transcript", "protein_id_gene" = "Protein_Id_Gene", "human_id" = "HumanID", "hgnc" = "HGNC", "number_of_peptides" = "Number_of_peptides") |> 
  ungroup()

ciona_proteome_normChan_tidy_wide <- 
  ciona_TMTproC_rowMeancolMedian_flat_goodNorm.df %>%
  rename_with(~ str_remove(., "_byRowCol")) %>%
  rename("protein_id_transcript" = "Protein_Id_transcript", "protein_id_gene" = "Protein_Id_Gene", "human_id" = "HumanID", "hgnc" = "HGNC", "number_of_peptides" = "Number_of_peptides") |> 
  rowwise() %>%
  mutate(across(c(6:13), ~ .x / sum(c_across(6:13))) * 8) %>%
  ungroup() 
# mutate(row_sum = rowSums(across(c(6:13)), na.rm = TRUE))  # checking rowSum protein is 1

# Sum of channels/stages is 1
ciona_proteome_normTo1_tidy_wide <- ciona_proteome_normChan_tidy_wide |> 
    # dplyr::select(-number_of_peptides) |> 
    mutate(across(c(6:13), ~./8 ))
    # mutate(row_sum = rowSums(across(c(6:13)), na.rm = TRUE))  # checking rowSum protein is 1

write.table(ciona_proteome_normTo1_tidy_wide, paste0(directory_save, "/ciona_proteome_normTo1.tsv"), quote = F, col.names = T, row.names = F, sep = "\t")
write.table(ciona_proteome_normChan_tidy_wide, paste0(directory_save, "/ciona_proteome_normToChan.tsv"), quote = F, col.names = T, row.names = F, sep = "\t")

```

Checking that the pattern is the same

```{r thr profile check}

# Picking the protein Thr
a1 <- ciona_proteome |> 
  filter(human_id =="THRB") |>   
  pivot_longer(cols = unfE:larva, names_to = "stage", values_to = "value") |> 
  mutate(stage = factor(stage, levels = c("unfE", "fertE", "cell16", "iniG", "latN", "midTII", "latTII", "larva"))) |> 
  ggplot(aes(x = stage, y = value)) +
  geom_point() +
  labs(title = "Scatterplot of Protein Expression Across Stages",
       x = "Stage",
       y = "Expression Level") +
  theme_pubr(base_family = "Avenir") 

a2 <- ciona_proteome_normChan_tidy_wide |> 
  filter(human_id =="THRB") |>   
  pivot_longer(cols = unfE:larva, names_to = "stage", values_to = "value") |> 
  mutate(stage = factor(stage, levels = c("unfE", "fertE", "cell16", "iniG", "latN", "midTII", "latTII", "larva"))) |> 
  ggplot(aes(x = stage, y = value)) +
  geom_point() +
  labs(title = "Scatterplot of Protein Expression Across Stages",
       x = "Stage",
       y = "Expression Level") +
  theme_pubr(base_family = "Avenir")

a3 <- ciona_proteome_normTo1_tidy_wide |> 
  filter(human_id =="THRB") |>   
  pivot_longer(cols = unfE:larva, names_to = "stage", values_to = "value") |> 
  mutate(stage = factor(stage, levels = c("unfE", "fertE", "cell16", "iniG", "latN", "midTII", "latTII", "larva"))) |> 
  ggplot(aes(x = stage, y = value)) +
  geom_point() +
  labs(title = "Scatterplot of Protein Expression Across Stages",
       x = "Stage",
       y = "Expression Level") +
  theme_pubr(base_family = "Avenir") 


a1 / a2 /a3 
# & coord_fixed(ratio = 1)
# a1 / a2 /a3 & coord_equal()
```
